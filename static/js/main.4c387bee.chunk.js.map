{"version":3,"sources":["common/Home.jsx","common/NavMenu.jsx","common/Achievements.jsx","common/AchievementCount.jsx","features/reach/Reach.jsx","features/halo3/Halo3.jsx","features/halo2/Halo2.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","props","Jumbotron","className","NavMenu","useState","isOpen","setIsOpen","Navbar","color","dark","expand","component","NavbarBrand","to","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","Achievements","categories","React","currentCategory","setCategory","filter","setFilter","achievements","find","cat","title","reduce","acc","cur","concat","ach","name","includes","description","sum","length","Row","Col","md","sm","Input","type","onChange","e","target","value","size","map","offset","placeholder","Table","score","AchievementCount","numberOfAchievements","Reach","Data","Halo3","Halo2","App","Container","fluid","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c387bee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron } from \"reactstrap\";\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <Jumbotron>\r\n      <h1 className=\"display-3\">Halo Collectibles</h1>\r\n      <p className=\"lead\">\r\n        This site will work as a tracking mechanism for following which\r\n        achievements and Collectibles you have claimed.\r\n      </p>\r\n      <hr className=\"my-2\" />\r\n      <p>Use the navigation above to select a game.</p>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n  Collapse,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\n\r\nconst NavMenu = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <Link component={NavbarBrand} to=\"/\">\r\n          Halo Collectibles\r\n        </Link>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <Link component={NavLink} to=\"/halo2\">\r\n                Halo 2\r\n              </Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link component={NavLink} to=\"/halo3\">\r\n                Halo 3\r\n              </Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link component={NavLink} to=\"/reach\">\r\n                Reach\r\n              </Link>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Table, Input, Row, Col } from \"reactstrap\";\r\n\r\nconst Achievements = ({ categories }) => {\r\n  const [currentCategory, setCategory] = React.useState(\"\");\r\n  const [filter, setFilter] = React.useState(\"\");\r\n  let achievements = currentCategory\r\n    ? categories.find((cat) => cat.title === currentCategory).achievements\r\n    : categories.reduce((acc, cur) => acc.concat(cur.achievements), []);\r\n\r\n  if (filter) {\r\n    achievements = achievements.filter(\r\n      (ach) => ach.name.includes(filter) || ach.description.includes(filter)\r\n    );\r\n  }\r\n\r\n  const numberOfAchievements = categories.reduce(\r\n    (sum, cat) => cat.achievements.length + sum,\r\n    0\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col md=\"4\" sm=\"12\">\r\n          <Input\r\n            type=\"select\"\r\n            onChange={(e) => setCategory(e.target.value)}\r\n            size=\"sm\"\r\n          >\r\n            <option value=\"\">- All -</option>\r\n            {categories.map((cat) => (\r\n              <option value={cat.title}>\r\n                {cat.title} ({cat.achievements.length})\r\n              </option>\r\n            ))}\r\n          </Input>\r\n        </Col>\r\n        <Col md={{ size: 2, offset: 6 }} sm=\"12\">\r\n          <Input\r\n            type=\"text\"\r\n            onChange={(e) => setFilter(e.target.value)}\r\n            placeholder=\"Search\"\r\n            size=\"sm\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <br />\r\n\r\n      <Table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Gamerscore</th>\r\n            <th>Description</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {achievements.map((ach) => (\r\n            <tr>\r\n              <td>{ach.name}</td>\r\n              <td>{ach.score}</td>\r\n              <td>{ach.description}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievements.propTypes = {\r\n  categories: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      achievements: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        description: PropTypes.string,\r\n        score: PropTypes.number,\r\n      }),\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Achievements;\r\n","import React from \"react\";\r\n\r\nconst AchievementCount = ({ categories, className }) => {\r\n  const numberOfAchievements = categories.reduce(\r\n    (sum, cat) => cat.achievements.length + sum,\r\n    0\r\n  );\r\n\r\n  return <span className={className}>{numberOfAchievements} Achievements</span>;\r\n};\r\n\r\nexport default AchievementCount;\r\n","import React from \"react\";\r\nimport Data from \"../reach/achievements.json\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\n\r\nconst Reach = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo: Reach\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reach;\r\n","import React from \"react\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\nimport Data from \"./achievements.json\";\r\n\r\nconst Halo3 = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo 3\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Halo3;\r\n","import React from \"react\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport Data from \"./achievements.json\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\n\r\nconst Halo2 = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo 2\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Halo2;\r\n","import React from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\r\nimport Home from \"./common/Home\";\r\nimport NavMenu from \"./common/NavMenu\";\r\nimport Reach from \"./features/reach/Reach.jsx\";\r\nimport Halo3 from \"./features/halo3/Halo3\";\r\nimport Halo2 from \"./features/halo2/Halo2\";\r\n\r\nimport \"./bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"App\">\r\n        <header>\r\n          <NavMenu />\r\n        </header>\r\n        <Container fluid className=\"mt-3\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/halo2\" exact>\r\n              <Halo2 />\r\n            </Route>\r\n            <Route path=\"/halo3\" exact>\r\n              <Halo3 />\r\n            </Route>\r\n            <Route path=\"/reach\" exact>\r\n              <Reach />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}