{"version":3,"sources":["common/Home.jsx","utilities/storage.js","UserContext.js","common/UserLogin.jsx","common/NavLink.jsx","common/NavMenu.jsx","common/AlertMessage.jsx","common/Categories.jsx","common/AchievementCategory.jsx","common/Achievements.jsx","common/AchievementCount.jsx","features/reach/Reach.jsx","features/halo3/Halo3.jsx","features/halo2/Halo2.jsx","features/haloce/HaloCE.jsx","features/user/UserAchievements.jsx","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","getGamertag","localStorage","getItem","UserContext","React","createContext","gamertag","achievements","showCompleted","useContext","user","setUser","useState","setGamertag","isLoading","setIsLoading","getAchievements","fetch","then","response","text","xuid","json","getProgress","_","showComplete","clearAchievements","removeItem","Label","Input","type","checked","onChange","e","target","to","Button","size","color","onClick","InputGroup","placeholder","value","InputGroupAddon","disabled","Spinner","url","location","useLocation","NavItem","component","NavLink","pathname","NavMenu","props","isOpen","setIsOpen","Navbar","dark","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavbarText","UserLogin","children","isVisible","Alert","onOptionChange","categories","map","cat","key","title","AchievementCategory","length","AlertMessage","Table","striped","hover","ach","name","isComplete","style","verticalAlign","score","description","Achievements","currentCategory","setCategory","filter","setFilter","find","reduce","acc","cur","concat","a","includes","filterAchievements","userAchievements","removeComplete","userProgress","x","Row","Col","md","sm","Categories","val","offset","AchievementCount","numberOfAchievements","sum","Reach","Data","Halo3","Halo2","str","JSON","parse","hideCompleted","App","Provider","Container","fluid","path","exact","Home","UserAchievements","HaloCE","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5410225b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron } from \"reactstrap\";\r\n\r\nexport default () => (\r\n  <Jumbotron>\r\n    <h1 className=\"display-3\">Halo Collectibles</h1>\r\n    <p className=\"lead\">\r\n      This site will work as a tracking mechanism for following which\r\n      achievements and Collectibles you have claimed.\r\n    </p>\r\n    <hr className=\"my-2\" />\r\n    <p>\r\n      Use the navigation above to select a game and enter your gamertag above to\r\n      filter the achievements you already have completed.\r\n    </p>\r\n  </Jumbotron>\r\n);\r\n","const haloAchievements = \"HALO_ACHIEVEMENTS\";\r\nconst gamertagName = \"GAMERTAG\";\r\nconst showCompleted = \"SHOW_COMPLETED\";\r\n\r\nexport const setAchievements = (gamertag, achievements) => {\r\n  localStorage.setItem(gamertagName, gamertag);\r\n  localStorage.setItem(haloAchievements, JSON.stringify(achievements));\r\n};\r\n\r\nexport const getAchievements = () => {\r\n  const str = localStorage.getItem(haloAchievements);\r\n\r\n  return str ? JSON.parse(str) : [];\r\n};\r\n\r\nexport const getGamertag = () => localStorage.getItem(gamertagName);\r\n\r\nexport const clearSession = () => {\r\n  localStorage.removeItem(haloAchievements);\r\n  localStorage.removeItem(gamertagName);\r\n};\r\n\r\nexport const showComplete = () => localStorage.getItem(showComplete) === \"true\";\r\n\r\nexport const toggleComplete = () => {\r\n  const current = localStorage.getItem(showCompleted);\r\n\r\n  if (current === \"true\") {\r\n    localStorage.setItem(showCompleted, \"false\");\r\n  } else {\r\n    localStorage.setItem(showCompleted, \"true\");\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst UserContext = React.createContext({\r\n  gamertag: \"\",\r\n  achievements: [],\r\n  showCompleted: false,\r\n});\r\n\r\nexport default UserContext;\r\n","import React from \"react\";\r\nimport { clearSession } from \"../utilities/storage\";\r\nimport {\r\n  Input,\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Spinner,\r\n  Label,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"../UserContext\";\r\n\r\nexport default () => {\r\n  const { user, setUser } = React.useContext(UserContext);\r\n  const [gamertag, setGamertag] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n  const getUser = () => {\r\n    return fetch(\r\n      \"https://halocollectiblesapi.azurewebsites.net/api/Search?name=renson\"\r\n    ).then((response) => response.text());\r\n  };\r\n\r\n  const getProgress = (xuid) => {\r\n    return fetch(\r\n      \"https://halocollectiblesapi.azurewebsites.net/api/GetHalo?xuid=\" + xuid\r\n    ).then((response) => response.json());\r\n  };\r\n\r\n  const getAchievements = () => {\r\n    setIsLoading(true);\r\n\r\n    getUser()\r\n      .then((xuid) => getProgress(xuid))\r\n      .then(\r\n        (achievements) => {\r\n          setUser((_) => ({\r\n            gamertag: gamertag,\r\n            achievements: achievements,\r\n            showComplete: false,\r\n          }));\r\n\r\n          setIsLoading(false);\r\n        },\r\n        (_) => setIsLoading(false)\r\n      );\r\n  };\r\n\r\n  const clearAchievements = () => {\r\n    clearSession();\r\n    setUser({ gamertag: \"\", achievements: [], showComplete: false });\r\n  };\r\n\r\n  const toggleShowComplete = () => {\r\n    setUser({\r\n      ...user,\r\n      showComplete: !user.showComplete,\r\n    });\r\n  };\r\n\r\n  if (user.gamertag) {\r\n    return (\r\n      <div>\r\n        <Label className=\"mr-2\">\r\n          <Input\r\n            type=\"checkbox\"\r\n            checked={user.showComplete}\r\n            onChange={(e) => {\r\n              toggleShowComplete(e.target.checked);\r\n            }}\r\n          />\r\n          Show Complete\r\n        </Label>\r\n        <Link to=\"/user\" className=\"mr-2\">\r\n          {user.gamertag}\r\n        </Link>\r\n        <Button\r\n          size=\"sm\"\r\n          color=\"outline-danger\"\r\n          type=\"button\"\r\n          onClick={() => clearAchievements()}\r\n        >\r\n          Clear\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <InputGroup>\r\n      <Input\r\n        type=\"text\"\r\n        size=\"sm\"\r\n        placeholder=\"Gamertag\"\r\n        onChange={(e) => setGamertag(e.target.value)}\r\n      />\r\n      <InputGroupAddon>\r\n        <Button\r\n          type=\"button\"\r\n          color=\"outline-info\"\r\n          size=\"sm\"\r\n          onClick={() => getAchievements()}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading && <Spinner color=\"light\" size=\"sm\" />}\r\n          {!isLoading && \"Go\"}\r\n        </Button>\r\n      </InputGroupAddon>\r\n    </InputGroup>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { NavLink, NavItem } from \"reactstrap\";\r\n\r\nexport default ({ url, text }) => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <NavItem>\r\n      <Link\r\n        component={NavLink}\r\n        to={url}\r\n        className={location.pathname === { url } ? \"active\" : \"\"}\r\n      >\r\n        {text}\r\n      </Link>\r\n    </NavItem>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n  Collapse,\r\n  Nav,\r\n  NavbarText,\r\n} from \"reactstrap\";\r\nimport UserLogin from \"./UserLogin\";\r\nimport { getGamertag } from \"../utilities/storage\";\r\nimport NavLink from \"./NavLink\";\r\n\r\nconst NavMenu = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n  const gamertag = getGamertag();\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <Link component={NavbarBrand} to=\"/\">\r\n          Halo Collectibles\r\n        </Link>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavLink url=\"/haloce\" text=\"Halo: CE\" />\r\n            <NavLink url=\"/halo2\" text=\"Halo 2\" />\r\n            <NavLink url=\"/halo3\" text=\"Halo 3\" />\r\n            <NavLink url=\"/reach\" text=\"Halo: Reach\" />\r\n\r\n            {gamertag && <NavLink url=\"/user\" text={gamertag} />}\r\n          </Nav>\r\n          <NavbarText>\r\n            <UserLogin />\r\n          </NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n","import React from \"react\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nexport default ({ children, isVisible, color }) => {\r\n  if (isVisible) {\r\n    return <Alert color={color}>{children}</Alert>;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { Input } from \"reactstrap\";\r\n\r\nexport default ({ onOptionChange, categories }) => (\r\n  <Input\r\n    type=\"select\"\r\n    onChange={(e) => onOptionChange(e.target.value)}\r\n    size=\"sm\"\r\n  >\r\n    <option value=\"\">- All -</option>\r\n    {categories.map((cat) => (\r\n      <option key={cat.title} value={cat.title}>\r\n        {cat.title}\r\n      </option>\r\n    ))}\r\n  </Input>\r\n);\r\n","import React from \"react\";\r\nimport AlertMessage from \"./AlertMessage\";\r\nimport { Table } from \"reactstrap\";\r\nimport { MdCheckCircle } from \"react-icons/md\";\r\n\r\nconst AchievementCategory = ({ achievements }) => {\r\n  if (achievements.length === 0) {\r\n    return (\r\n      <AlertMessage color=\"info\" isVisible>\r\n        No Achievements to Display\r\n      </AlertMessage>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Table striped hover>\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Gamerscore</th>\r\n          <th>Description</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {achievements.map((ach) => (\r\n          <tr key={ach.name}>\r\n            <td>\r\n              {ach?.isComplete && (\r\n                <MdCheckCircle\r\n                  className=\"mr-2\"\r\n                  style={{ verticalAlign: \"sub\" }}\r\n                  size={17}\r\n                />\r\n              )}\r\n              {ach.name}\r\n            </td>\r\n            <td>{ach.score}</td>\r\n            <td>{ach.description}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default AchievementCategory;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Table, Input, Row, Col } from \"reactstrap\";\r\nimport AlertMessage from \"../common/AlertMessage\";\r\nimport Categories from \"./Categories\";\r\nimport UserContext from \"../UserContext\";\r\nimport AchievementCategory from \"./AchievementCategory\";\r\n\r\nconst removeComplete = (achievements, user) => {\r\n  const userAchievements = user.achievements\r\n    .filter((a) => a.isComplete)\r\n    .map((a) => a.name);\r\n\r\n  if (userAchievements.length > 0) {\r\n    return achievements.filter((a) => !userAchievements.includes(a.name));\r\n  }\r\n\r\n  return achievements;\r\n};\r\n\r\nconst filterAchievements = (achievements, filter) => {\r\n  if (filter) {\r\n    return achievements.filter(\r\n      (a) => a.name.includes(filter) || a.description.includes(filter)\r\n    );\r\n  }\r\n  return achievements;\r\n};\r\n\r\nconst Achievements = ({ categories }) => {\r\n  const { user } = React.useContext(UserContext);\r\n  const [currentCategory, setCategory] = React.useState(\"\");\r\n  const [filter, setFilter] = React.useState(\"\");\r\n\r\n  let achievements = currentCategory\r\n    ? categories.find((cat) => cat.title === currentCategory).achievements\r\n    : categories.reduce((acc, cur) => acc.concat(cur.achievements), []);\r\n\r\n  achievements = filterAchievements(achievements, filter);\r\n\r\n  if (!user.showComplete) {\r\n    achievements = removeComplete(achievements, user);\r\n  }\r\n\r\n  if (user.achievements.length > 0) {\r\n    achievements = achievements.map((ach) => {\r\n      let userProgress = user.achievements.find((x) => x.name === ach.name);\r\n\r\n      return userProgress ?? { ...ach, isComplete: false };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col md=\"4\" sm=\"12\">\r\n          {categories.length > 1 && (\r\n            <Categories\r\n              categories={categories}\r\n              onOptionChange={(val) => setCategory(val)}\r\n            />\r\n          )}\r\n        </Col>\r\n        <Col md={{ size: 2, offset: 6 }} sm=\"12\">\r\n          <Input\r\n            type=\"text\"\r\n            onChange={(e) => setFilter(e.target.value)}\r\n            placeholder={\"Search \" + achievements.length + \" achievements\"}\r\n            size=\"sm\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <br />\r\n\r\n      <AlertMessage isVisible={achievements.length === 0} color=\"info\">\r\n        You have all the achievements in this category!\r\n      </AlertMessage>\r\n\r\n      <AchievementCategory achievements={achievements} />\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievements.propTypes = {\r\n  categories: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      achievements: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        description: PropTypes.string,\r\n        score: PropTypes.number,\r\n      }),\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Achievements;\r\n","import React from \"react\";\r\n\r\nconst AchievementCount = ({ categories, className }) => {\r\n  const numberOfAchievements = categories.reduce(\r\n    (sum, cat) => cat.achievements.length + sum,\r\n    0\r\n  );\r\n\r\n  return <span className={className}>{numberOfAchievements} Achievements</span>;\r\n};\r\n\r\nexport default AchievementCount;\r\n","import React from \"react\";\r\nimport Data from \"../reach/achievements.json\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\n\r\nconst Reach = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo: Reach\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reach;\r\n","import React from \"react\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\nimport Data from \"./achievements.json\";\r\n\r\nconst Halo3 = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo 3\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Halo3;\r\n","import React from \"react\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport Data from \"./achievements.json\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\n\r\nconst Halo2 = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo 2\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Halo2;\r\n","import React from \"react\";\r\nimport Categories from \"./achievements.json\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\nimport Achievements from \"../../common/Achievements\";\r\n\r\nexport default () => (\r\n  <div>\r\n    <h2>\r\n      Halo: Combat Evolved\r\n      <AchievementCount className=\"float-right\" categories={Categories} />\r\n    </h2>\r\n\r\n    <Achievements categories={Categories} />\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { getAchievements, getGamertag } from \"../../utilities/storage\";\r\nimport { Alert } from \"reactstrap\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\n\r\nexport default () => {\r\n  const gamertag = getGamertag();\r\n\r\n  if (!gamertag) {\r\n    return (\r\n      <Alert color=\"info\">\r\n        You are not logged in. Use the login form in the header\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  const achievements = getAchievements().filter((x) => x.isComplete);\r\n\r\n  if (achievements.length === 0) {\r\n    return (\r\n      <Alert color=\"warning\">\r\n        You have no achievements complete yet! Get started!\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  const categories = [\r\n    {\r\n      title: \"all\",\r\n      achievements: achievements,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Unlocked Achievements for: {gamertag}\r\n        <AchievementCount categories={categories} className=\"float-right\" />\r\n      </h2>\r\n      <Achievements categories={categories} hideCompleted={false} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\r\nimport Home from \"./common/Home\";\r\nimport NavMenu from \"./common/NavMenu\";\r\nimport Reach from \"./features/reach/Reach.jsx\";\r\nimport Halo3 from \"./features/halo3/Halo3\";\r\nimport Halo2 from \"./features/halo2/Halo2\";\r\n\r\nimport \"./bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport HaloCE from \"./features/haloce/HaloCE\";\r\nimport UserAchievements from \"./features/user/UserAchievements\";\r\nimport UserContext from \"./UserContext\";\r\n\r\nfunction App() {\r\n  let [user, setUser] = React.useState({\r\n    gamertag: \"\",\r\n    achievements: [],\r\n    showComplete: false,\r\n  });\r\n\r\n  return (\r\n    <HashRouter>\r\n      <UserContext.Provider value={{ user, setUser }}>\r\n        <div className=\"App\">\r\n          <header>\r\n            <NavMenu />\r\n          </header>\r\n          <Container fluid className=\"mt-3\">\r\n            <Switch>\r\n              <Route path=\"/\" exact>\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/user\" exact>\r\n                <UserAchievements />\r\n              </Route>\r\n              <Route path=\"/haloce\" exact>\r\n                <HaloCE />\r\n              </Route>\r\n              <Route path=\"/halo2\" exact>\r\n                <Halo2 />\r\n              </Route>\r\n              <Route path=\"/halo3\" exact>\r\n                <Halo3 />\r\n              </Route>\r\n              <Route path=\"/reach\" exact>\r\n                <Reach />\r\n              </Route>\r\n            </Switch>\r\n          </Container>\r\n        </div>\r\n      </UserContext.Provider>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}