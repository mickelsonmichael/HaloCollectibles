{"version":3,"sources":["common/Home.jsx","common/UserLogin.jsx","utilities/storage.js","common/NavMenu.jsx","common/Achievements.jsx","common/AchievementCount.jsx","features/reach/Reach.jsx","features/halo3/Halo3.jsx","features/halo2/Halo2.jsx","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","React","useState","gamertag","setGamertag","isLoading","setIsLoading","localStorage","getItem","currentGamertag","setCurrentGamertag","getAchievements","fetch","then","response","text","xuid","json","getProgress","achievements","setItem","JSON","stringify","setAchievements","error","clearAchievements","removeItem","Button","size","color","type","onClick","InputGroup","Input","placeholder","onChange","e","target","value","InputGroupAddon","disabled","NavMenu","props","isOpen","setIsOpen","location","useLocation","Navbar","dark","expand","component","NavbarBrand","to","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","pathname","NavbarText","UserLogin","Achievements","categories","currentCategory","setCategory","filter","setFilter","find","cat","title","reduce","acc","cur","concat","ach","name","includes","description","userAchievements","str","parse","isComplete","map","length","Row","Col","md","sm","offset","Alert","Table","striped","score","AchievementCount","numberOfAchievements","sum","Reach","Data","Halo3","Halo2","App","Container","fluid","path","exact","Home","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0y5BAGe,oBACb,kBAACA,EAAA,EAAD,KACE,wBAAIC,UAAU,aAAd,qBACA,uBAAGA,UAAU,QAAb,mHAIA,wBAAIA,UAAU,SACd,+J,wGCHW,aAAO,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACZC,EADY,KACFC,EADE,OAEeH,IAAMC,UAAS,GAF9B,mBAEZG,EAFY,KAEDC,EAFC,OAG2BL,IAAMC,SCGrBK,aAAaC,QAbzB,aDOA,mBAGZC,EAHY,KAGKC,EAHL,KAiBbC,EAAkB,WACtBL,GAAa,GAZNM,MACL,wEACAC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAa3BF,MAAK,SAACG,GAAD,OAVU,SAACA,GACnB,OAAOJ,MACL,kEAAoEI,GACpEH,MAAK,SAACC,GAAD,OAAcA,EAASG,UAOZC,CAAYF,MAC3BH,MACC,SAACM,IC5BsB,SAAChB,EAAUgB,GACxCZ,aAAaa,QAHM,WAGgBjB,GACnCI,aAAaa,QALU,oBAKgBC,KAAKC,UAAUH,ID2B9CI,CAAgBpB,EAAUgB,GAC1Bb,GAAa,GACbI,EAAmBP,MAErB,SAACqB,GAAD,OAAWlB,GAAa,OAIxBmB,EAAoB,WCvB1BlB,aAAamB,WAjBU,qBAkBvBnB,aAAamB,WAjBM,YDyCjBhB,EAAmB,KAGrB,OAAID,EAEA,6BACE,0BAAMT,UAAU,QAAQS,GACxB,kBAACkB,EAAA,EAAD,CACEC,KAAK,KACLC,MAAM,iBACNC,KAAK,SACLC,QAAS,kBAAMN,MAJjB,UAaJ,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEH,KAAK,OACLF,KAAK,KACLM,YAAY,WACZC,SAAU,SAACC,GAAD,OAAOhC,EAAYgC,EAAEC,OAAOC,UAExC,kBAACC,EAAA,EAAD,KACE,kBAACZ,EAAA,EAAD,CACEG,KAAK,SACLD,MAAM,eACND,KAAK,KACLG,QAAS,kBAAMpB,KACf6B,SAAUnC,GAETA,GAAa,SACZA,GAAa,SEbVoC,EAnDC,SAACC,GAAW,IAAD,EACGxC,oBAAS,GADZ,mBAClByC,EADkB,KACVC,EADU,KAGnBC,EAAWC,cAEjB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQlB,MAAM,OAAOmB,MAAI,EAACC,OAAO,MAC/B,kBAAC,IAAD,CAAMC,UAAWC,IAAaC,GAAG,KAAjC,qBAGA,kBAACC,EAAA,EAAD,CAAetB,QATN,kBAAMa,GAAWD,MAU1B,kBAACW,EAAA,EAAD,CAAUX,OAAQA,EAAQY,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKxD,UAAU,UAAUuD,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAAC,IAAD,CACEP,UAAWQ,IACXN,GAAG,SACHpD,UAAiC,WAAtB6C,EAASc,SAAwB,SAAW,IAHzD,WAQF,kBAACF,EAAA,EAAD,KACE,kBAAC,IAAD,CACEP,UAAWQ,IACXN,GAAG,SACHpD,UAAiC,WAAtB6C,EAASc,SAAwB,SAAW,IAHzD,WAQF,kBAACF,EAAA,EAAD,KACE,kBAAC,IAAD,CACEP,UAAWQ,IACXN,GAAG,SACHpD,UAAiC,WAAtB6C,EAASc,SAAwB,SAAW,IAHzD,WASJ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAD,W,wCC0CGC,EA9FM,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACA9D,IAAMC,SAAS,IADf,mBAChC8D,EADgC,KACfC,EADe,OAEXhE,IAAMC,SAAS,IAFJ,mBAEhCgE,EAFgC,KAExBC,EAFwB,KAInChD,EAAe6C,EACfD,EAAWK,MAAK,SAACC,GAAD,OAASA,EAAIC,QAAUN,KAAiB7C,aACxD4C,EAAWQ,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAIE,OAAOD,EAAItD,gBAAe,IAE9D+C,IACF/C,EAAeA,EAAa+C,QAC1B,SAACS,GAAD,OAASA,EAAIC,KAAKC,SAASX,IAAWS,EAAIG,YAAYD,SAASX,OAInE,IAAMa,EFXuB,WAC7B,IAAMC,EAAMzE,aAAaC,QATF,qBAWvB,OAAOwE,EAAM3D,KAAK4D,MAAMD,GAAO,GEQNrE,GACtBuD,QAAO,SAACS,GAAD,OAASA,EAAIO,cACpBC,KAAI,SAACR,GAAD,OAASA,EAAIC,QAQpB,OANIG,EAAiBK,OAAS,IAC5BjE,EAAeA,EAAa+C,QAC1B,SAACS,GAAD,OAAUI,EAAiBF,SAASF,EAAIC,UAK1C,6BACE,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,MACb,kBAACvD,EAAA,EAAD,CACEH,KAAK,SACLK,SAAU,SAACC,GAAD,OAAO6B,EAAY7B,EAAEC,OAAOC,QACtCV,KAAK,MAEL,4BAAQU,MAAM,IAAd,WACCyB,EAAWoB,KAAI,SAACd,GAAD,OACd,4BAAQ/B,MAAO+B,EAAIC,OAAQD,EAAIC,YAIrC,kBAACgB,EAAA,EAAD,CAAKC,GAAI,CAAE3D,KAAM,EAAG6D,OAAQ,GAAKD,GAAG,MAClC,kBAACvD,EAAA,EAAD,CACEH,KAAK,OACLK,SAAU,SAACC,GAAD,OAAO+B,EAAU/B,EAAEC,OAAOC,QACpCJ,YAAY,SACZN,KAAK,SAKX,6BAEyB,IAAxBT,EAAaiE,QACZ,kBAACM,EAAA,EAAD,CAAO7D,MAAM,QAAb,mDAKDV,EAAaiE,OAAS,GACrB,kBAACO,EAAA,EAAD,CAAOC,SAAO,GACZ,+BACE,4BACE,oCACA,0CACA,6CAGJ,+BACGzE,EAAagE,KAAI,SAACR,GAAD,OAChB,4BACE,4BAAKA,EAAIC,MACT,4BAAKD,EAAIkB,OACT,4BAAKlB,EAAIG,qBC7DVgB,EAbU,SAAC,GAA+B,IAA7B/B,EAA4B,EAA5BA,WAAY/D,EAAgB,EAAhBA,UAChC+F,EAAuBhC,EAAWQ,QACtC,SAACyB,EAAK3B,GAAN,OAAcA,EAAIlD,aAAaiE,OAASY,IACxC,GAGF,OACE,0BAAMhG,UAAWA,GACd+F,EADH,2BCWWE,EAfD,WACZ,IAAMlC,EAAamC,EAAKnC,WAExB,OACE,6BACE,0CAEE,kBAAC,EAAD,CAAkB/D,UAAU,cAAc+D,WAAYA,KAGxD,kBAAC,EAAD,CAAcA,WAAYA,M,QCKjBoC,EAfD,WACZ,IAAMpC,EAAamC,EAAKnC,WAExB,OACE,6BACE,qCAEE,kBAAC,EAAD,CAAkB/D,UAAU,cAAc+D,WAAYA,KAGxD,kBAAC,EAAD,CAAcA,WAAYA,M,QCKjBqC,EAfD,WACZ,IAAMrC,EAAamC,EAAKnC,WAExB,OACE,6BACE,qCAEE,kBAAC,EAAD,CAAkB/D,UAAU,cAAc+D,WAAYA,KAGxD,kBAAC,EAAD,CAAcA,WAAYA,M,YCyBjBsC,MA5Bf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKrG,UAAU,OACb,gCACE,kBAAC,EAAD,OAEF,kBAACsG,EAAA,EAAD,CAAWC,OAAK,EAACvG,UAAU,QACzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwG,KAAK,IAAIC,OAAK,GACnB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,SAASC,OAAK,GACxB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAK,GACxB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAK,GACxB,kBAAC,EAAD,YCnBME,QACW,cAA7BC,OAAO/D,SAASgE,UAEe,UAA7BD,OAAO/D,SAASgE,UAEhBD,OAAO/D,SAASgE,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzG,MAAK,SAAA0G,GACJA,EAAaC,gBAEdC,OAAM,SAAAjG,GACLkG,QAAQlG,MAAMA,EAAMmG,c","file":"static/js/main.cdbeb362.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron } from \"reactstrap\";\r\n\r\nexport default () => (\r\n  <Jumbotron>\r\n    <h1 className=\"display-3\">Halo Collectibles</h1>\r\n    <p className=\"lead\">\r\n      This site will work as a tracking mechanism for following which\r\n      achievements and Collectibles you have claimed.\r\n    </p>\r\n    <hr className=\"my-2\" />\r\n    <p>\r\n      Use the navigation above to select a game and enter your gamertag above to\r\n      filter the achievements you already have completed.\r\n    </p>\r\n  </Jumbotron>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  setAchievements,\r\n  getGamertag,\r\n  clearSession,\r\n} from \"../utilities/storage\";\r\nimport { Input, Button, InputGroup, InputGroupAddon } from \"reactstrap\";\r\n\r\nexport default () => {\r\n  const [gamertag, setGamertag] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [currentGamertag, setCurrentGamertag] = React.useState(getGamertag());\r\n\r\n  const getUser = () => {\r\n    return fetch(\r\n      \"https://halocollectiblesapi.azurewebsites.net/api/Search?name=renson\"\r\n    ).then((response) => response.text());\r\n  };\r\n\r\n  const getProgress = (xuid) => {\r\n    return fetch(\r\n      \"https://halocollectiblesapi.azurewebsites.net/api/GetHalo?xuid=\" + xuid\r\n    ).then((response) => response.json());\r\n  };\r\n\r\n  const getAchievements = () => {\r\n    setIsLoading(true);\r\n\r\n    getUser()\r\n      .then((xuid) => getProgress(xuid))\r\n      .then(\r\n        (achievements) => {\r\n          setAchievements(gamertag, achievements);\r\n          setIsLoading(false);\r\n          setCurrentGamertag(gamertag);\r\n        },\r\n        (error) => setIsLoading(false)\r\n      );\r\n  };\r\n\r\n  const clearAchievements = () => {\r\n    clearSession();\r\n    setCurrentGamertag(\"\");\r\n  };\r\n\r\n  if (currentGamertag) {\r\n    return (\r\n      <div>\r\n        <span className=\"mr-2\">{currentGamertag}</span>\r\n        <Button\r\n          size=\"sm\"\r\n          color=\"outline-danger\"\r\n          type=\"button\"\r\n          onClick={() => clearAchievements()}\r\n        >\r\n          Clear\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <InputGroup>\r\n      <Input\r\n        type=\"text\"\r\n        size=\"sm\"\r\n        placeholder=\"Gamertag\"\r\n        onChange={(e) => setGamertag(e.target.value)}\r\n      />\r\n      <InputGroupAddon>\r\n        <Button\r\n          type=\"button\"\r\n          color=\"outline-info\"\r\n          size=\"sm\"\r\n          onClick={() => getAchievements()}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading && \"Going\"}\r\n          {!isLoading && \"Go\"}\r\n        </Button>\r\n      </InputGroupAddon>\r\n    </InputGroup>\r\n  );\r\n};\r\n","const haloAchievements = \"HALO_ACHIEVEMENTS\";\r\nconst gamertagName = \"GAMERTAG\";\r\n\r\nexport const setAchievements = (gamertag, achievements) => {\r\n  localStorage.setItem(gamertagName, gamertag);\r\n  localStorage.setItem(haloAchievements, JSON.stringify(achievements));\r\n};\r\n\r\nexport const getAchievements = () => {\r\n  const str = localStorage.getItem(haloAchievements);\r\n\r\n  return str ? JSON.parse(str) : [];\r\n};\r\n\r\nexport const getGamertag = () => localStorage.getItem(gamertagName);\r\n\r\nexport const clearSession = () => {\r\n  localStorage.removeItem(haloAchievements);\r\n  localStorage.removeItem(gamertagName);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n  Collapse,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  NavbarText,\r\n} from \"reactstrap\";\r\nimport UserLogin from \"./UserLogin\";\r\n\r\nconst NavMenu = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <Link component={NavbarBrand} to=\"/\">\r\n          Halo Collectibles\r\n        </Link>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <Link\r\n                component={NavLink}\r\n                to=\"/halo2\"\r\n                className={location.pathname === \"/halo2\" ? \"active\" : \"\"}\r\n              >\r\n                Halo 2\r\n              </Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link\r\n                component={NavLink}\r\n                to=\"/halo3\"\r\n                className={location.pathname === \"/halo3\" ? \"active\" : \"\"}\r\n              >\r\n                Halo 3\r\n              </Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link\r\n                component={NavLink}\r\n                to=\"/reach\"\r\n                className={location.pathname === \"/reach\" ? \"active\" : \"\"}\r\n              >\r\n                Reach\r\n              </Link>\r\n            </NavItem>\r\n          </Nav>\r\n          <NavbarText>\r\n            <UserLogin />\r\n          </NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Table, Input, Row, Col, Alert } from \"reactstrap\";\r\nimport { getAchievements } from \"../utilities/storage\";\r\n\r\nconst Achievements = ({ categories }) => {\r\n  const [currentCategory, setCategory] = React.useState(\"\");\r\n  const [filter, setFilter] = React.useState(\"\");\r\n\r\n  let achievements = currentCategory\r\n    ? categories.find((cat) => cat.title === currentCategory).achievements\r\n    : categories.reduce((acc, cur) => acc.concat(cur.achievements), []);\r\n\r\n  if (filter) {\r\n    achievements = achievements.filter(\r\n      (ach) => ach.name.includes(filter) || ach.description.includes(filter)\r\n    );\r\n  }\r\n\r\n  const userAchievements = getAchievements()\r\n    .filter((ach) => ach.isComplete)\r\n    .map((ach) => ach.name);\r\n\r\n  if (userAchievements.length > 0) {\r\n    achievements = achievements.filter(\r\n      (ach) => !userAchievements.includes(ach.name)\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col md=\"4\" sm=\"12\">\r\n          <Input\r\n            type=\"select\"\r\n            onChange={(e) => setCategory(e.target.value)}\r\n            size=\"sm\"\r\n          >\r\n            <option value=\"\">- All -</option>\r\n            {categories.map((cat) => (\r\n              <option value={cat.title}>{cat.title}</option>\r\n            ))}\r\n          </Input>\r\n        </Col>\r\n        <Col md={{ size: 2, offset: 6 }} sm=\"12\">\r\n          <Input\r\n            type=\"text\"\r\n            onChange={(e) => setFilter(e.target.value)}\r\n            placeholder=\"Search\"\r\n            size=\"sm\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <br />\r\n\r\n      {achievements.length === 0 && (\r\n        <Alert color=\"info\">\r\n          You have all the achievements in this category!\r\n        </Alert>\r\n      )}\r\n\r\n      {achievements.length > 0 && (\r\n        <Table striped>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Gamerscore</th>\r\n              <th>Description</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {achievements.map((ach) => (\r\n              <tr>\r\n                <td>{ach.name}</td>\r\n                <td>{ach.score}</td>\r\n                <td>{ach.description}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievements.propTypes = {\r\n  categories: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      achievements: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        description: PropTypes.string,\r\n        score: PropTypes.number,\r\n      }),\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Achievements;\r\n","import React from \"react\";\r\n\r\nconst AchievementCount = ({ categories, className }) => {\r\n  const numberOfAchievements = categories.reduce(\r\n    (sum, cat) => cat.achievements.length + sum,\r\n    0\r\n  );\r\n\r\n  return (\r\n    <span className={className}>\r\n      {numberOfAchievements} Possible Achievements\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default AchievementCount;\r\n","import React from \"react\";\r\nimport Data from \"../reach/achievements.json\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\n\r\nconst Reach = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo: Reach\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reach;\r\n","import React from \"react\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\nimport Data from \"./achievements.json\";\r\n\r\nconst Halo3 = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo 3\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Halo3;\r\n","import React from \"react\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport Data from \"./achievements.json\";\r\nimport AchievementCount from \"../../common/AchievementCount\";\r\n\r\nconst Halo2 = () => {\r\n  const categories = Data.categories;\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo 2\r\n        <AchievementCount className=\"float-right\" categories={categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Halo2;\r\n","import React from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\r\nimport Home from \"./common/Home\";\r\nimport NavMenu from \"./common/NavMenu\";\r\nimport Reach from \"./features/reach/Reach.jsx\";\r\nimport Halo3 from \"./features/halo3/Halo3\";\r\nimport Halo2 from \"./features/halo2/Halo2\";\r\n\r\nimport \"./bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"App\">\r\n        <header>\r\n          <NavMenu />\r\n        </header>\r\n        <Container fluid className=\"mt-3\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/halo2\" exact>\r\n              <Halo2 />\r\n            </Route>\r\n            <Route path=\"/halo3\" exact>\r\n              <Halo3 />\r\n            </Route>\r\n            <Route path=\"/reach\" exact>\r\n              <Reach />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}