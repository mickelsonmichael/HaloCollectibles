{"version":3,"sources":["common/NavMenu.jsx","common/Home.jsx","common/Achievements.jsx","common/TabSection.jsx","features/reach/Reach.jsx","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","useState","isOpen","setIsOpen","Navbar","color","dark","expand","component","NavbarBrand","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","Home","Jumbotron","Achievements","title","achievements","Table","map","ach","name","score","description","TabSection","tabs","getId","tab","replace","toLowerCase","activeTab","setActiveTab","id","active","toggle","TabContent","TabPane","tabId","content","Reach","Data","categories","App","basename","Container","fluid","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7cfc155.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n  Collapse,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\n\r\nconst NavMenu = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <Link component={NavbarBrand} to=\"/\">\r\n          Halo Collectibles\r\n        </Link>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <Link component={NavLink} to=\"/Reach\">\r\n                Reach\r\n              </Link>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n","import React from \"react\";\r\nimport { Jumbotron } from \"reactstrap\";\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <Jumbotron>\r\n      <h1 className=\"display-3\">Halo Collectibles</h1>\r\n      <p className=\"lead\">\r\n        This site will work as a tracking mechanism for following which\r\n        achievements and Collectibles you have claimed.\r\n      </p>\r\n      <hr className=\"my-2\" />\r\n      <p>Use the navigation above to select a game.</p>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Table } from \"reactstrap\";\r\n\r\nconst Achievements = ({ title, achievements }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"h3 mb-4\">{title}</div>\r\n      <Table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Gamerscore</th>\r\n            <th>Description</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {achievements.map((ach) => (\r\n            <tr>\r\n              <td>{ach.name}</td>\r\n              <td>{ach.score}</td>\r\n              <td>{ach.description}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievements.propTypes = {\r\n  title: PropTypes.string,\r\n  achievements: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default Achievements;\r\n","import React, { useState } from \"react\";\r\nimport { Nav, NavItem, NavLink, TabContent, TabPane } from \"reactstrap\";\r\n\r\nconst TabSection = ({ tabs }) => {\r\n  const getId = (tab) =>\r\n    \"tabsection-\" +\r\n    tab.title.replace(/ /g, \"-\").replace(/:/g, \" \").toLowerCase();\r\n\r\n  const [activeTab, setActiveTab] = useState(getId(tabs[0]));\r\n\r\n  const toggle = (tab) => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Nav tabs>\r\n        {tabs.map((tab) => {\r\n          let id = getId(tab);\r\n\r\n          return (\r\n            <NavItem>\r\n              <NavLink\r\n                className={{ active: activeTab === id }}\r\n                onClick={() => {\r\n                  toggle(id);\r\n                }}\r\n              >\r\n                {tab.title}\r\n              </NavLink>\r\n            </NavItem>\r\n          );\r\n        })}\r\n      </Nav>\r\n      <TabContent activeTab={activeTab}>\r\n        {tabs.map((tab) => {\r\n          let id = getId(tab);\r\n          return (\r\n            <TabPane className=\"pt-4\" tabId={id}>\r\n              {tab.content}\r\n            </TabPane>\r\n          );\r\n        })}\r\n      </TabContent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabSection;\r\n","import React from \"react\";\r\nimport Data from \"../reach/data.json\";\r\nimport Achievements from \"../../common/Achievements\";\r\nimport TabSection from \"../../common/TabSection\";\r\n\r\nconst Reach = () => {\r\n  const tabs = Data.categories.map(({ achievements, title }) => {\r\n    return {\r\n      title,\r\n      content: <Achievements achievements={achievements} title={title} />,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h2>Halo: Reach</h2>\r\n\r\n      <TabSection tabs={tabs} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reach;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport NavMenu from \"./common/NavMenu\";\nimport \"./bootstrap.min.css\";\nimport Home from \"./common/Home\";\nimport Reach from \"./features/reach/Reach.jsx\";\nimport { Container } from \"reactstrap\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/HaloCollectibles\">\n      <div className=\"App\">\n        <header>\n          <NavMenu />\n        </header>\n        <Container fluid className=\"mt-3\">\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/Reach\" exact>\n              <Reach />\n            </Route>\n          </Switch>\n        </Container>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}