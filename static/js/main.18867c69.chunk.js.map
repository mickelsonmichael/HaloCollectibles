{"version":3,"sources":["UserContext.js","common/AlertMessage.jsx","common/achievements/Categories.jsx","common/achievements/AchievementProgress.jsx","common/achievements/AchievementCard.jsx","common/achievements/AchievementCategory.jsx","common/achievements/Achievements.jsx","features/user/Emblem.jsx","features/user/PlayerCard.jsx","features/user/UserAchievements.jsx","common/layout/UserLogin.jsx","common/layout/NavLink.jsx","common/layout/NavMenu.jsx","common/Home.jsx","common/achievements/AchievementCount.jsx","features/general/General.jsx","features/haloce/HaloCE.jsx","common/skulls/SkullCard.jsx","common/skulls/Skulls.jsx","features/halo2/Halo2.jsx","features/halo3/Halo3.jsx","features/ODST/ODST.jsx","features/reach/Reach.jsx","App.js","serviceWorker.js","index.js"],"names":["userKey","initialState","gamertag","achievements","showCompleted","UserContext","React","createContext","localState","JSON","parse","localStorage","getItem","reducer","user","newUser","console","log","removeItem","UserProvider","props","useReducer","setUser","useEffect","setItem","stringify","Provider","value","children","isVisible","color","Alert","onOptionChange","categories","Input","type","onChange","e","target","bsSize","map","cat","key","title","achievement","useContext","useState","tooltip","openTooltip","undefined","length","userAchievement","find","a","name","progress","current","id","replace","Progress","Tooltip","placement","isOpen","toggle","className","isComplete","size","score","description","link","href","rel","AchievementProgress","AchievementCategory","AlertMessage","Row","noGutters","ach","Col","lg","md","xs","AchievementCard","Achievements","forceShowComplete","currentCategory","setCategory","filter","setFilter","reduce","acc","cur","concat","lowercaseFilter","toLowerCase","includes","filterAchievements","userProgress","x","showComplete","sm","Categories","val","offset","placeholder","image","setImage","fetch","then","response","ok","blob","src","URL","createObjectURL","alt","height","width","complete","total","percent","Emblem","toUpperCase","Math","floor","userAchievements","PlayerCard","setGamertag","isLoading","setIsLoading","getAchievements","text","xuid","json","error","statusText","Error","getProgress","Label","checked","to","Button","onClick","InputGroup","disabled","InputGroupAddon","addonType","Spinner","url","cssClass","useLocation","pathname","NavItem","setIsOpen","Navbar","dark","expand","NavbarToggler","Collapse","navbar","Nav","NavLink","NavbarText","UserLogin","Jumbotron","AchievementCount","numberOfAchievements","sum","skull","collapse","setCollapse","difficulty","isFound","level","video","dangerouslySetInnerHTML","__html","location","skulls","filteredSkulls","SkullCard","Halo2","match","useRouteMatch","NavbarBrand","path","exact","Skulls","Halo3","ODST","Component","NavMenu","Container","fluid","Home","UserAchievements","General","HaloCE","Reach","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.18867c69.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\r\n\r\nconst userKey = \"HALO_COLLECTIBLES_USER\";\r\n\r\nconst initialState = {\r\n  gamertag: \"\",\r\n  achievements: [],\r\n  showCompleted: false,\r\n};\r\n\r\nconst UserContext = React.createContext(initialState);\r\nconst localState = JSON.parse(localStorage.getItem(userKey));\r\n\r\nconst reducer = (user, newUser) => {\r\n  console.log(\"reducing\");\r\n  if (newUser === null) {\r\n    localStorage.removeItem(userKey);\r\n    return initialState;\r\n  }\r\n\r\n  return { ...user, ...newUser };\r\n};\r\n\r\nconst UserProvider = (props) => {\r\n  const [user, setUser] = useReducer(reducer, localState || initialState);\r\n\r\n  useEffect(() => localStorage.setItem(userKey, JSON.stringify(user)), [user]);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      {props.children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport { UserContext, UserProvider };\r\n","import React from \"react\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nexport default ({ children, isVisible = true, color }) => {\r\n  if (isVisible) {\r\n    return <Alert color={color}>{children}</Alert>;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { Input } from \"reactstrap\";\r\n\r\nexport default ({ onOptionChange, categories }) => (\r\n  <Input\r\n    type=\"select\"\r\n    onChange={(e) => onOptionChange(e.target.value)}\r\n    bsSize=\"sm\"\r\n  >\r\n    <option value=\"\">- All -</option>\r\n    {categories.map((cat) => (\r\n      <option key={cat.title} value={cat.title}>\r\n        {cat.title}\r\n      </option>\r\n    ))}\r\n  </Input>\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { UserContext } from \"../../UserContext\";\r\nimport { Progress, Tooltip } from \"reactstrap\";\r\n\r\nexport default ({ achievement }) => {\r\n  const { achievements } = React.useContext(UserContext).user;\r\n  const [tooltip, openTooltip] = useState(false);\r\n\r\n  const toggle = () => openTooltip(!tooltip);\r\n\r\n  if (achievements === undefined || achievements.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const userAchievement = achievements.find((a) => a.name === achievement.name);\r\n\r\n  if (\r\n    userAchievement === undefined ||\r\n    userAchievement.target === undefined ||\r\n    userAchievement.target === 1 ||\r\n    userAchievement.progress >= 1\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const { progress, current, target } = userAchievement;\r\n  const id =\r\n    achievement.name.replace(/ /g, \"-\").replace(/[?.,:!\"']/g, \"\") + \"-tooltip\";\r\n\r\n  return (\r\n    <div>\r\n      <Progress\r\n        color={progress > 1 ? \"success\" : \"info\"}\r\n        value={progress * 100}\r\n        id={id}\r\n      />\r\n      <Tooltip placement=\"top\" isOpen={tooltip} target={id} toggle={toggle}>\r\n        {current} / {target}\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport AchievementProgress from \"./AchievementProgress\";\r\nimport { MdCheckCircle, MdLink } from \"react-icons/md\";\r\nimport \"./achievements.css\";\r\n\r\nexport default ({ achievement }) => {\r\n  return (\r\n    <div className=\"achievement-card\">\r\n      <div className=\"achievement-card__header\">\r\n        <div className=\"achievement-card__title\">{achievement.name}</div>\r\n        <span className=\"achievement-card__score\">\r\n          {achievement.isComplete && <MdCheckCircle size={15} />}\r\n          {achievement.score}\r\n        </span>\r\n      </div>\r\n      <div className=\"achievement-card__description\">\r\n        {achievement.description}\r\n        {achievement.link && (\r\n          <span>\r\n            {\" \"}\r\n            <a\r\n              href={achievement.link}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <MdLink />\r\n              Link\r\n            </a>\r\n          </span>\r\n        )}\r\n      </div>\r\n      <div className=\"achievement-card__progress\">\r\n        <AchievementProgress achievement={achievement} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport AlertMessage from \"../AlertMessage\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport AchievementCard from \"./AchievementCard\";\r\n\r\nconst AchievementCategory = ({ achievements }) => {\r\n  if (achievements.length === 0) {\r\n    return (\r\n      <AlertMessage color=\"info\" isVisible>\r\n        No Achievements found!\r\n      </AlertMessage>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Row noGutters>\r\n      {achievements.map((ach) => (\r\n        <Col lg={4} md={6} xs={12} key={ach.name} className=\"d-flex\">\r\n          <AchievementCard achievement={ach} />\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default AchievementCategory;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Row, Col } from \"reactstrap\";\r\nimport Categories from \"./Categories\";\r\nimport { UserContext } from \"../../UserContext\";\r\nimport AchievementCategory from \"./AchievementCategory\";\r\n\r\nconst filterAchievements = (achievements, filter) => {\r\n  if (filter) {\r\n    const lowercaseFilter = filter.toLowerCase();\r\n    return achievements.filter(\r\n      (a) =>\r\n        a.name.toLowerCase().includes(lowercaseFilter) ||\r\n        a.description.toLowerCase().includes(lowercaseFilter)\r\n    );\r\n  }\r\n  return achievements;\r\n};\r\n\r\nconst Achievements = ({ categories, forceShowComplete = false }) => {\r\n  const { user } = React.useContext(UserContext);\r\n  const [currentCategory, setCategory] = React.useState(\"\");\r\n  const [filter, setFilter] = React.useState(\"\");\r\n\r\n  let achievements = currentCategory\r\n    ? categories.find((cat) => cat.title === currentCategory).achievements\r\n    : categories.reduce((acc, cur) => acc.concat(cur.achievements), []);\r\n\r\n  achievements = filterAchievements(achievements, filter);\r\n\r\n  if (user.achievements.length > 0) {\r\n    achievements = achievements.map((ach) => {\r\n      let userProgress = user.achievements.find(\r\n        (x) => x.name.toLowerCase() === ach.name.toLowerCase()\r\n      );\r\n\r\n      return (\r\n        { ...userProgress, link: ach.link } ?? { ...ach, isComplete: false }\r\n      );\r\n    });\r\n\r\n    if (!user.showComplete && !forceShowComplete) {\r\n      achievements = achievements.filter((ach) => ach.isComplete === false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col md=\"4\" sm=\"12\">\r\n          {categories.length > 1 && (\r\n            <Categories\r\n              categories={categories}\r\n              onOptionChange={(val) => setCategory(val)}\r\n            />\r\n          )}\r\n        </Col>\r\n        <Col md={{ size: 3, offset: 5 }} sm=\"12\">\r\n          <Input\r\n            type=\"text\"\r\n            onChange={(e) => setFilter(e.target.value)}\r\n            placeholder={\"Search \" + achievements.length + \" achievements\"}\r\n            bsSize=\"sm\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <br />\r\n\r\n      <AchievementCategory achievements={achievements} />\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievements.propTypes = {\r\n  categories: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      achievements: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          name: PropTypes.string,\r\n          description: PropTypes.string,\r\n          score: PropTypes.number,\r\n        })\r\n      ),\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Achievements;\r\n","import React from \"react\";\r\n\r\nexport default ({ gamertag }) => {\r\n  var [image, setImage] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    if (gamertag && image === null) {\r\n      fetch(\r\n        `https://halocollectiblesapi.azurewebsites.net/api/GetEmblem?name=${gamertag}`\r\n      ).then(async (response) => {\r\n        if (response.ok) {\r\n          setImage(await response.blob());\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  if (!gamertag || image === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <img\r\n        src={URL.createObjectURL(image)}\r\n        alt={gamertag}\r\n        height=\"128\"\r\n        width=\"128\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Emblem from \"./Emblem\";\r\nimport { Progress } from \"reactstrap\";\r\n\r\nexport default ({ gamertag, complete, total }) => {\r\n  const percent = (complete / total) * 100;\r\n\r\n  return (\r\n    <div className=\"d-flex border rounded mb-2\">\r\n      <Emblem gamertag={gamertag} className=\"border-right\" />\r\n\r\n      <div className=\"flex-grow-1 align-self-center m-2\">\r\n        <h2 className=\"d-flex\">\r\n          <strong className=\"mr-auto\">{gamertag.toUpperCase()}</strong>\r\n          <span className=\"text-muted\">\r\n            {complete}/{total} ({Math.floor(percent)}%)\r\n          </span>\r\n        </h2>\r\n        <Progress color=\"info\" value={percent} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { UserContext } from \"../../UserContext\";\r\nimport AlertMessage from \"../../common/AlertMessage\";\r\nimport Achievements from \"../../common/achievements/Achievements\";\r\nimport PlayerCard from \"./PlayerCard\";\r\n\r\nexport default () => {\r\n  const { gamertag, achievements } = React.useContext(UserContext).user;\r\n\r\n  if (!gamertag) {\r\n    return (\r\n      <AlertMessage color=\"info\">\r\n        You are not logged in. Use the login form in the header\r\n      </AlertMessage>\r\n    );\r\n  }\r\n\r\n  const userAchievements = achievements.filter((a) => a.isComplete);\r\n\r\n  if (userAchievements.length === 0) {\r\n    return (\r\n      <AlertMessage color=\"warning\">\r\n        You have no achievements complete yet! Get started!\r\n      </AlertMessage>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <PlayerCard\r\n        gamertag={gamertag}\r\n        complete={userAchievements.length}\r\n        total={achievements.length}\r\n      />\r\n\r\n      <Achievements\r\n        forceShowComplete\r\n        categories={[{ title: \"completed\", achievements: userAchievements }]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Input,\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Spinner,\r\n  Label,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserContext } from \"../../UserContext\";\r\nimport Switch from \"react-switch\";\r\n\r\nexport default () => {\r\n  const { user, setUser } = React.useContext(UserContext);\r\n  const [gamertag, setGamertag] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n  const getUser = () => {\r\n    return fetch(\r\n      \"https://halocollectiblesapi.azurewebsites.net/api/Search?name=renson\"\r\n    ).then((response) => response.text());\r\n  };\r\n\r\n  const getProgress = (xuid) => {\r\n    return fetch(\r\n      \"https://halocollectiblesapi.azurewebsites.net/api/GetHalo?xuid=\" + xuid\r\n    ).then((response) => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n\r\n      console.error(\"API Error: \" + response.statusText);\r\n      throw new Error(\"Issue contacting Api\");\r\n    });\r\n  };\r\n\r\n  const getAchievements = () => {\r\n    setIsLoading(true);\r\n\r\n    getUser()\r\n      .then((xuid) => getProgress(xuid))\r\n      .then(\r\n        (achievements) => {\r\n          setUser({\r\n            gamertag: gamertag,\r\n            achievements: achievements,\r\n            showComplete: false,\r\n          });\r\n\r\n          setIsLoading(false);\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n  };\r\n\r\n  const clearAchievements = () => setUser(null);\r\n\r\n  const toggleShowComplete = () => {\r\n    setUser({\r\n      showComplete: !user.showComplete,\r\n    });\r\n  };\r\n\r\n  if (user.gamertag) {\r\n    return (\r\n      <div className=\"d-flex align-items-baseline ml-2\">\r\n        <Label className=\"mr-2 text-right\">\r\n          <Switch\r\n            onChange={(checked) => toggleShowComplete(checked)}\r\n            checked={user.showComplete}\r\n            height={17}\r\n            width={34}\r\n            className=\"mr-2 align-text-bottom\"\r\n          />\r\n          <span>Show Complete </span>\r\n          <span>\r\n            for&nbsp;\r\n            <Link to=\"/user\" className=\"mr-2\">\r\n              {user.gamertag}\r\n            </Link>\r\n          </span>\r\n        </Label>\r\n\r\n        <Button\r\n          size=\"sm\"\r\n          color=\"outline-danger\"\r\n          type=\"button\"\r\n          onClick={() => clearAchievements()}\r\n        >\r\n          Clear\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <InputGroup>\r\n      <Input\r\n        type=\"text\"\r\n        bsSize=\"sm\"\r\n        placeholder=\"Gamertag\"\r\n        onChange={(e) => setGamertag(e.target.value)}\r\n        disabled={isLoading}\r\n      />\r\n      <InputGroupAddon addonType=\"append\">\r\n        <Button\r\n          type=\"button\"\r\n          color=\"outline-info\"\r\n          className=\"btn-sm\"\r\n          size=\"sm\"\r\n          onClick={() => getAchievements()}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading && <Spinner color=\"light\" size=\"sm\" />}\r\n          {!isLoading && \"Go\"}\r\n        </Button>\r\n      </InputGroupAddon>\r\n    </InputGroup>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { NavItem } from \"reactstrap\";\r\n\r\nexport default ({ url, text }) => {\r\n  const location = useLocation();\r\n  const cssClass =\r\n    \"nav-link \" + (location.pathname.includes(url) ? \"active\" : \"\");\r\n\r\n  return (\r\n    <NavItem>\r\n      <Link to={url} className={cssClass}>\r\n        {text}\r\n      </Link>\r\n    </NavItem>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, NavbarToggler, Collapse, Nav, NavbarText } from \"reactstrap\";\r\nimport UserLogin from \"./UserLogin\";\r\nimport NavLink from \"./NavLink\";\r\n\r\nexport default () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Halo Collectibles\r\n        </Link>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavLink url=\"/general\" text=\"General\" />\r\n            <NavLink url=\"/haloce\" text=\"Halo:&nbsp;CE\" />\r\n            <NavLink url=\"/halo2\" text=\"Halo&nbsp;2\" />\r\n            <NavLink url=\"/halo3\" text=\"Halo&nbsp;3\" />\r\n            <NavLink url=\"/reach\" text=\"Halo:&nbsp;Reach\" />\r\n            <NavLink url=\"/ODST\" text=\"Halo&nbsp;3:&nbsp;ODST\" />\r\n          </Nav>\r\n          <NavbarText>\r\n            <UserLogin />\r\n          </NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Jumbotron } from \"reactstrap\";\r\nimport { UserContext } from \"../UserContext\";\r\nimport AlertMessage from \"./AlertMessage\";\r\n\r\nexport default () => {\r\n  const { gamertag } = useContext(UserContext).user;\r\n\r\n  return (\r\n    <div>\r\n      <AlertMessage isVisible={gamertag}>\r\n        You are logged in! Select a game from the navigation above to view the\r\n        remaining achievements. Or click your name in the corner to view all\r\n        your completed achievements.\r\n      </AlertMessage>\r\n      <Jumbotron>\r\n        <h1 className=\"display-3\">Halo Collectibles</h1>\r\n        <p className=\"lead\">\r\n          This site will work as a tracking mechanism for following which\r\n          achievements and Collectibles you have claimed.\r\n        </p>\r\n        <hr className=\"my-2\" />\r\n        <p>\r\n          You may view the achievements using the navigation options above. For\r\n          a more curated experience, use the textbox to enter your Xbox Live\r\n          Gamertag and filter out the achievements you already have completed.\r\n        </p>\r\n        <p>\r\n          If you see an achievement you have recently unlocked still on the\r\n          list, you will need to log out and log back in. Each login request\r\n          accesses the Xbox API, which isn't a free process, so in the interest\r\n          of saving money the achievements are not updated automatically.\r\n        </p>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nconst AchievementCount = ({ categories, className }) => {\r\n  const numberOfAchievements = categories.reduce(\r\n    (sum, cat) => cat.achievements.length + sum,\r\n    0\r\n  );\r\n\r\n  return <span className={className}>{numberOfAchievements} Achievements</span>;\r\n};\r\n\r\nexport default AchievementCount;\r\n","import React from \"react\";\r\nimport AchievementCount from \"../../common/achievements/AchievementCount\";\r\nimport Achievements from \"../../common/achievements/Achievements\";\r\nimport Categories from \"./categories.json\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h2>\r\n        General and Cross-game\r\n        <AchievementCount className=\"float-right\" categories={Categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={Categories} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Categories from \"./achievements.json\";\r\nimport AchievementCount from \"../../common/achievements/AchievementCount\";\r\nimport Achievements from \"../../common/achievements/Achievements\";\r\n\r\nexport default () => (\r\n  <div>\r\n    <h2>\r\n      Halo: Combat Evolved\r\n      <AchievementCount className=\"float-right\" categories={Categories} />\r\n    </h2>\r\n\r\n    <Achievements categories={Categories} />\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { IoLogoYoutube } from \"react-icons/io\";\r\nimport { MdExpandMore, MdExpandLess, MdCheckCircle } from \"react-icons/md\";\r\nimport { Collapse } from \"reactstrap\";\r\n\r\nexport default ({ skull }) => {\r\n  const [collapse, setCollapse] = React.useState(false);\r\n\r\n  const toggle = () => setCollapse(!collapse);\r\n\r\n  return (\r\n    <div className=\"skull-card\">\r\n      <div\r\n        className={\r\n          skull.difficulty === \"Legendary\"\r\n            ? \"skull-card__header legendary\"\r\n            : \"skull-card__header\"\r\n        }\r\n      >\r\n        <div className=\"skull-card__title\">\r\n          <dvi className=\"skull-card__title-text\">\r\n            {skull.name}\r\n            {skull.isFound && (\r\n              <MdCheckCircle className=\"skull-card__title-icon\" />\r\n            )}\r\n          </dvi>\r\n          <div className=\"skull-card__level\">\r\n            {skull.level} - {skull.difficulty}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"skull-card__link\">\r\n          <a\r\n            href={`https://www.youtube.com/watch?v=${skull.video}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <IoLogoYoutube />\r\n          </a>\r\n          {collapse ? (\r\n            <div onClick={toggle}>\r\n              Location\r\n              <MdExpandLess />\r\n            </div>\r\n          ) : (\r\n            <div onClick={toggle}>\r\n              Location\r\n              <MdExpandMore />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <Collapse isOpen={collapse}>\r\n        <div\r\n          className=\"skull-card__location\"\r\n          dangerouslySetInnerHTML={{ __html: skull.location }}\r\n        />\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport SkullCard from \"./SkullCard\";\r\nimport { UserContext } from \"../../UserContext\";\r\nimport \"./skulls.css\";\r\nimport { Col, Row, Alert } from \"reactstrap\";\r\n\r\nexport default ({ skulls }) => {\r\n  const { achievements, showComplete } = React.useContext(UserContext).user;\r\n  let filteredSkulls = skulls;\r\n\r\n  if (achievements && achievements.length > 0) {\r\n    filteredSkulls = filteredSkulls.map((skull) => {\r\n      const achievement = achievements.find((a) => a.name.includes(skull.name));\r\n\r\n      return {\r\n        ...skull,\r\n        isFound: achievement ? achievement.isComplete : false,\r\n      };\r\n    });\r\n  }\r\n\r\n  if (!showComplete) {\r\n    filteredSkulls = filteredSkulls.filter((skull) => !skull.isFound);\r\n  }\r\n\r\n  if (filteredSkulls.length === 0) {\r\n    return (\r\n      <div>\r\n        <Alert color=\"info\">\r\n          You have already unlocked all the skulls! Toggle the switch in the\r\n          navigation to show your already achieved skulls.\r\n        </Alert>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Skulls</h2>\r\n      <Row noGutters>\r\n        {filteredSkulls.map((skull) => (\r\n          <Col sm={12} md={6} lg={4}>\r\n            <SkullCard skull={skull} key={skull.name} />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Achievements from \"../../common/achievements/Achievements\";\r\nimport Categories from \"./achievements.json\";\r\nimport AchievementCount from \"../../common/achievements/AchievementCount\";\r\nimport Skulls from \"../../common/skulls/Skulls\";\r\nimport skulls from \"./skulls.json\";\r\nimport { Route, useRouteMatch } from \"react-router\";\r\nimport { Nav, Navbar, NavbarBrand } from \"reactstrap\";\r\nimport NavLink from \"../../common/layout/NavLink\";\r\n\r\nconst Halo2 = () => {\r\n  let match = useRouteMatch();\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"primary\" dark expand={false}>\r\n        <NavbarBrand>Halo 2</NavbarBrand>\r\n        <Nav navbar className=\"mr-auto flex-row\">\r\n          <NavLink url={match.path} text=\"Achievements\" />\r\n          <NavLink url={`${match.path}/skulls`} text=\"Skulls\" />\r\n        </Nav>\r\n      </Navbar>\r\n\r\n      <br />\r\n\r\n      <Route path={match.path} exact>\r\n        <h2>\r\n          Achievements\r\n          <AchievementCount className=\"float-right\" categories={Categories} />\r\n        </h2>\r\n        <Achievements categories={Categories} />\r\n      </Route>\r\n      <Route path={`${match.path}/skulls`}>\r\n        <Skulls skulls={skulls} />\r\n      </Route>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Halo2;\r\n","import React from \"react\";\r\nimport Achievements from \"../../common/achievements/Achievements\";\r\nimport AchievementCount from \"../../common/achievements/AchievementCount\";\r\nimport Categories from \"./achievements.json\";\r\n\r\nconst Halo3 = () => {\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Halo 3\r\n        <AchievementCount className=\"float-right\" categories={Categories} />\r\n      </h2>\r\n\r\n      <Achievements categories={Categories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Halo3;\r\n","import React from \"react\";\r\nimport Categories from \"./achievements.json\";\r\nimport AchievementCount from \"../../common/achievements/AchievementCount\";\r\nimport Achievements from \"../../common/achievements/Achievements\";\r\n\r\nexport default class ODST extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>\r\n          Halo 3: ODST\r\n          <AchievementCount categories={Categories} className=\"float-right\" />\r\n        </h2>\r\n        <Achievements categories={Categories} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Categories from \"../reach/achievements.json\";\r\nimport Achievements from \"../../common/achievements/Achievements\";\r\nimport AchievementCount from \"../../common/achievements/AchievementCount\";\r\n\r\nexport default () => (\r\n  <div>\r\n    <h2>\r\n      Halo: Reach\r\n      <AchievementCount className=\"float-right\" categories={Categories} />\r\n    </h2>\r\n\r\n    <Achievements categories={Categories} />\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\r\n\r\n// App Components\r\nimport UserAchievements from \"./features/user/UserAchievements\";\r\nimport { UserProvider } from \"./UserContext\";\r\nimport NavMenu from \"./common/layout/NavMenu\";\r\n\r\n// Assets\r\nimport \"./bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\n// Routes\r\nimport Home from \"./common/Home\";\r\nimport General from \"./features/general/General\";\r\nimport HaloCE from \"./features/haloce/HaloCE\";\r\nimport Halo2 from \"./features/halo2/Halo2\";\r\nimport Halo3 from \"./features/halo3/Halo3\";\r\nimport ODST from \"./features/ODST/ODST\";\r\nimport Reach from \"./features/reach/Reach.jsx\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <UserProvider>\r\n      <div className=\"App\">\r\n        <header>\r\n          <NavMenu />\r\n        </header>\r\n        <Container fluid className=\"mt-3\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/user\" exact>\r\n              <UserAchievements />\r\n            </Route>\r\n            <Route path=\"/general\" exact>\r\n              <General />\r\n            </Route>\r\n            <Route path=\"/haloce\" exact>\r\n              <HaloCE />\r\n            </Route>\r\n            <Route path=\"/halo2\">\r\n              <Halo2 />\r\n            </Route>\r\n            <Route path=\"/halo3\" exact>\r\n              <Halo3 />\r\n            </Route>\r\n            <Route path=\"/reach\" exact>\r\n              <Reach />\r\n            </Route>\r\n            <Route path=\"/ODST\" exact>\r\n              <ODST />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    </UserProvider>\r\n  </HashRouter>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}